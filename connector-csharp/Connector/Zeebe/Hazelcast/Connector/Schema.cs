// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: schema.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ExporterProtocol {

  /// <summary>Holder for reflection information generated from schema.proto</summary>
  public static partial class SchemaReflection {

    #region Descriptor
    /// <summary>File descriptor for schema.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SchemaReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxzY2hlbWEucHJvdG8SEWV4cG9ydGVyX3Byb3RvY29sGh9nb29nbGUvcHJv",
            "dG9idWYvdGltZXN0YW1wLnByb3RvGhxnb29nbGUvcHJvdG9idWYvc3RydWN0",
            "LnByb3RvIjEKCFJlY29yZElkEhMKC3BhcnRpdGlvbklkGAEgASgFEhAKCHBv",
            "c2l0aW9uGAIgASgDIp4CCg5SZWNvcmRNZXRhZGF0YRITCgtwYXJ0aXRpb25J",
            "ZBgBIAEoBRIQCghwb3NpdGlvbhgCIAEoAxIQCghyYWZ0VGVybRgDIAEoBRIL",
            "CgNrZXkYBCABKAMSLQoJdGltZXN0YW1wGAUgASgLMhouZ29vZ2xlLnByb3Rv",
            "YnVmLlRpbWVzdGFtcBISCgpyZWNvcmRUeXBlGAYgASgJEg4KBmludGVudBgH",
            "IAEoCRIRCgl2YWx1ZVR5cGUYCCABKAkSHAoUc291cmNlUmVjb3JkUG9zaXRp",
            "b24YCSABKAMSEgoKcHJvZHVjZXJJZBgKIAEoBRIVCg1yZWplY3Rpb25UeXBl",
            "GAsgASgJEhcKD3JlamVjdGlvblJlYXNvbhgMIAEoCSLyAgoQRGVwbG95bWVu",
            "dFJlY29yZBIzCghtZXRhZGF0YRgBIAEoCzIhLmV4cG9ydGVyX3Byb3RvY29s",
            "LlJlY29yZE1ldGFkYXRhEj8KCXJlc291cmNlcxgCIAMoCzIsLmV4cG9ydGVy",
            "X3Byb3RvY29sLkRlcGxveW1lbnRSZWNvcmQuUmVzb3VyY2USPwoJd29ya2Zs",
            "b3dzGAMgAygLMiwuZXhwb3J0ZXJfcHJvdG9jb2wuRGVwbG95bWVudFJlY29y",
            "ZC5Xb3JrZmxvdxpICghSZXNvdXJjZRIQCghyZXNvdXJjZRgBIAEoDBIUCgxy",
            "ZXNvdXJjZVR5cGUYAiABKAkSFAoMcmVzb3VyY2VOYW1lGAMgASgJGl0KCFdv",
            "cmtmbG93EhUKDWJwbW5Qcm9jZXNzSWQYASABKAkSDwoHdmVyc2lvbhgCIAEo",
            "BRITCgt3b3JrZmxvd0tleRgDIAEoAxIUCgxyZXNvdXJjZU5hbWUYBSABKAki",
            "4QEKDkluY2lkZW50UmVjb3JkEjMKCG1ldGFkYXRhGAEgASgLMiEuZXhwb3J0",
            "ZXJfcHJvdG9jb2wuUmVjb3JkTWV0YWRhdGESEQoJZXJyb3JUeXBlGAIgASgJ",
            "EhQKDGVycm9yTWVzc2FnZRgDIAEoCRIVCg1icG1uUHJvY2Vzc0lkGAQgASgJ",
            "EhsKE3dvcmtmbG93SW5zdGFuY2VLZXkYBSABKAMSEQoJZWxlbWVudElkGAYg",
            "ASgJEhoKEmVsZW1lbnRJbnN0YW5jZUtleRgHIAEoAxIOCgZqb2JLZXkYCCAB",
            "KAMi6wMKCUpvYlJlY29yZBIzCghtZXRhZGF0YRgBIAEoCzIhLmV4cG9ydGVy",
            "X3Byb3RvY29sLlJlY29yZE1ldGFkYXRhEgwKBHR5cGUYAiABKAkSNQoHaGVh",
            "ZGVycxgDIAEoCzIkLmV4cG9ydGVyX3Byb3RvY29sLkpvYlJlY29yZC5IZWFk",
            "ZXJzEi4KDWN1c3RvbUhlYWRlcnMYBCABKAsyFy5nb29nbGUucHJvdG9idWYu",
            "U3RydWN0Eg4KBndvcmtlchgFIAEoCRIPCgdyZXRyaWVzGAYgASgFEiwKCGRl",
            "YWRsaW5lGAcgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIUCgxl",
            "cnJvck1lc3NhZ2UYCCABKAkSKAoHcGF5bG9hZBgJIAEoCzIXLmdvb2dsZS5w",
            "cm90b2J1Zi5TdHJ1Y3QapAEKB0hlYWRlcnMSEQoJZWxlbWVudElkGAEgASgJ",
            "EhoKEmVsZW1lbnRJbnN0YW5jZUtleRgCIAEoAxIVCg1icG1uUHJvY2Vzc0lk",
            "GAMgASgJEiEKGXdvcmtmbG93RGVmaW5pdGlvblZlcnNpb24YBCABKAUSGwoT",
            "d29ya2Zsb3dJbnN0YW5jZUtleRgFIAEoAxITCgt3b3JrZmxvd0tleRgGIAEo",
            "AyLBAQoOSm9iQmF0Y2hSZWNvcmQSMwoIbWV0YWRhdGEYASABKAsyIS5leHBv",
            "cnRlcl9wcm90b2NvbC5SZWNvcmRNZXRhZGF0YRIMCgR0eXBlGAIgASgJEg4K",
            "BndvcmtlchgDIAEoCRIPCgd0aW1lb3V0GAQgASgDEg4KBmFtb3VudBgFIAEo",
            "BRIPCgdqb2JLZXlzGAYgAygDEioKBGpvYnMYByADKAsyHC5leHBvcnRlcl9w",
            "cm90b2NvbC5Kb2JSZWNvcmQiuwEKDU1lc3NhZ2VSZWNvcmQSMwoIbWV0YWRh",
            "dGEYASABKAsyIS5leHBvcnRlcl9wcm90b2NvbC5SZWNvcmRNZXRhZGF0YRIM",
            "CgRuYW1lGAIgASgJEhYKDmNvcnJlbGF0aW9uS2V5GAMgASgJEhEKCW1lc3Nh",
            "Z2VJZBgEIAEoCRISCgp0aW1lVG9MaXZlGAUgASgDEigKB3BheWxvYWQYBiAB",
            "KAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0IrYBChlNZXNzYWdlU3Vic2Ny",
            "aXB0aW9uUmVjb3JkEjMKCG1ldGFkYXRhGAEgASgLMiEuZXhwb3J0ZXJfcHJv",
            "dG9jb2wuUmVjb3JkTWV0YWRhdGESGwoTd29ya2Zsb3dJbnN0YW5jZUtleRgC",
            "IAEoAxIaChJlbGVtZW50SW5zdGFuY2VLZXkYAyABKAMSEwoLbWVzc2FnZU5h",
            "bWUYBCABKAkSFgoOY29ycmVsYXRpb25LZXkYBSABKAkimgEKI01lc3NhZ2VT",
            "dGFydEV2ZW50U3Vic2NyaXB0aW9uUmVjb3JkEjMKCG1ldGFkYXRhGAEgASgL",
            "MiEuZXhwb3J0ZXJfcHJvdG9jb2wuUmVjb3JkTWV0YWRhdGESEwoLd29ya2Zs",
            "b3dLZXkYAiABKAMSFAoMc3RhcnRFdmVudElkGAMgASgJEhMKC21lc3NhZ2VO",
            "YW1lGAQgASgJIpIBCgpSYWZ0UmVjb3JkEjMKCG1ldGFkYXRhGAEgASgLMiEu",
            "ZXhwb3J0ZXJfcHJvdG9jb2wuUmVjb3JkTWV0YWRhdGESNQoHbWVtYmVycxgC",
            "IAMoCzIkLmV4cG9ydGVyX3Byb3RvY29sLlJhZnRSZWNvcmQuTWVtYmVyGhgK",
            "Bk1lbWJlchIOCgZub2RlSWQYASABKAUiigEKC1RpbWVyUmVjb3JkEjMKCG1l",
            "dGFkYXRhGAEgASgLMiEuZXhwb3J0ZXJfcHJvdG9jb2wuUmVjb3JkTWV0YWRh",
            "dGESGgoSZWxlbWVudEluc3RhbmNlS2V5GAIgASgDEg8KB2R1ZURhdGUYAyAB",
            "KAMSGQoRaGFuZGxlckZsb3dOb2RlSWQYBCABKAki/gEKFldvcmtmbG93SW5z",
            "dGFuY2VSZWNvcmQSMwoIbWV0YWRhdGEYASABKAsyIS5leHBvcnRlcl9wcm90",
            "b2NvbC5SZWNvcmRNZXRhZGF0YRIVCg1icG1uUHJvY2Vzc0lkGAIgASgJEg8K",
            "B3ZlcnNpb24YAyABKAUSEwoLd29ya2Zsb3dLZXkYBCABKAMSGwoTd29ya2Zs",
            "b3dJbnN0YW5jZUtleRgFIAEoAxIRCgllbGVtZW50SWQYBiABKAkSGAoQc2Nv",
            "cGVJbnN0YW5jZUtleRgHIAEoAxIoCgdwYXlsb2FkGAggASgLMhcuZ29vZ2xl",
            "LnByb3RvYnVmLlN0cnVjdCLRAQoiV29ya2Zsb3dJbnN0YW5jZVN1YnNjcmlw",
            "dGlvblJlY29yZBIzCghtZXRhZGF0YRgBIAEoCzIhLmV4cG9ydGVyX3Byb3Rv",
            "Y29sLlJlY29yZE1ldGFkYXRhEhsKE3dvcmtmbG93SW5zdGFuY2VLZXkYAiAB",
            "KAMSGgoSZWxlbWVudEluc3RhbmNlS2V5GAMgASgDEhMKC21lc3NhZ2VOYW1l",
            "GAQgASgJEigKB3BheWxvYWQYBSABKAsyFy5nb29nbGUucHJvdG9idWYuU3Ry",
            "dWN0QhsKF2lvLnplZWJlLmV4cG9ydGVyLnByb3RvUABiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ExporterProtocol.RecordId), global::ExporterProtocol.RecordId.Parser, new[]{ "PartitionId", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ExporterProtocol.RecordMetadata), global::ExporterProtocol.RecordMetadata.Parser, new[]{ "PartitionId", "Position", "RaftTerm", "Key", "Timestamp", "RecordType", "Intent", "ValueType", "SourceRecordPosition", "ProducerId", "RejectionType", "RejectionReason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ExporterProtocol.DeploymentRecord), global::ExporterProtocol.DeploymentRecord.Parser, new[]{ "Metadata", "Resources", "Workflows" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::ExporterProtocol.DeploymentRecord.Types.Resource), global::ExporterProtocol.DeploymentRecord.Types.Resource.Parser, new[]{ "Resource_", "ResourceType", "ResourceName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ExporterProtocol.DeploymentRecord.Types.Workflow), global::ExporterProtocol.DeploymentRecord.Types.Workflow.Parser, new[]{ "BpmnProcessId", "Version", "WorkflowKey", "ResourceName" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::ExporterProtocol.IncidentRecord), global::ExporterProtocol.IncidentRecord.Parser, new[]{ "Metadata", "ErrorType", "ErrorMessage", "BpmnProcessId", "WorkflowInstanceKey", "ElementId", "ElementInstanceKey", "JobKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ExporterProtocol.JobRecord), global::ExporterProtocol.JobRecord.Parser, new[]{ "Metadata", "Type", "Headers", "CustomHeaders", "Worker", "Retries", "Deadline", "ErrorMessage", "Payload" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::ExporterProtocol.JobRecord.Types.Headers), global::ExporterProtocol.JobRecord.Types.Headers.Parser, new[]{ "ElementId", "ElementInstanceKey", "BpmnProcessId", "WorkflowDefinitionVersion", "WorkflowInstanceKey", "WorkflowKey" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::ExporterProtocol.JobBatchRecord), global::ExporterProtocol.JobBatchRecord.Parser, new[]{ "Metadata", "Type", "Worker", "Timeout", "Amount", "JobKeys", "Jobs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ExporterProtocol.MessageRecord), global::ExporterProtocol.MessageRecord.Parser, new[]{ "Metadata", "Name", "CorrelationKey", "MessageId", "TimeToLive", "Payload" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ExporterProtocol.MessageSubscriptionRecord), global::ExporterProtocol.MessageSubscriptionRecord.Parser, new[]{ "Metadata", "WorkflowInstanceKey", "ElementInstanceKey", "MessageName", "CorrelationKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ExporterProtocol.MessageStartEventSubscriptionRecord), global::ExporterProtocol.MessageStartEventSubscriptionRecord.Parser, new[]{ "Metadata", "WorkflowKey", "StartEventId", "MessageName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ExporterProtocol.RaftRecord), global::ExporterProtocol.RaftRecord.Parser, new[]{ "Metadata", "Members" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::ExporterProtocol.RaftRecord.Types.Member), global::ExporterProtocol.RaftRecord.Types.Member.Parser, new[]{ "NodeId" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::ExporterProtocol.TimerRecord), global::ExporterProtocol.TimerRecord.Parser, new[]{ "Metadata", "ElementInstanceKey", "DueDate", "HandlerFlowNodeId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ExporterProtocol.WorkflowInstanceRecord), global::ExporterProtocol.WorkflowInstanceRecord.Parser, new[]{ "Metadata", "BpmnProcessId", "Version", "WorkflowKey", "WorkflowInstanceKey", "ElementId", "ScopeInstanceKey", "Payload" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ExporterProtocol.WorkflowInstanceSubscriptionRecord), global::ExporterProtocol.WorkflowInstanceSubscriptionRecord.Parser, new[]{ "Metadata", "WorkflowInstanceKey", "ElementInstanceKey", "MessageName", "Payload" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Convenience message for systems which use a key/id system for each record
  /// </summary>
  public sealed partial class RecordId : pb::IMessage<RecordId> {
    private static readonly pb::MessageParser<RecordId> _parser = new pb::MessageParser<RecordId>(() => new RecordId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ExporterProtocol.SchemaReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordId(RecordId other) : this() {
      partitionId_ = other.partitionId_;
      position_ = other.position_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordId Clone() {
      return new RecordId(this);
    }

    /// <summary>Field number for the "partitionId" field.</summary>
    public const int PartitionIdFieldNumber = 1;
    private int partitionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PartitionId {
      get { return partitionId_; }
      set {
        partitionId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private long position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PartitionId != other.PartitionId) return false;
      if (Position != other.Position) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PartitionId != 0) hash ^= PartitionId.GetHashCode();
      if (Position != 0L) hash ^= Position.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PartitionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PartitionId);
      }
      if (Position != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Position);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PartitionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PartitionId);
      }
      if (Position != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Position);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecordId other) {
      if (other == null) {
        return;
      }
      if (other.PartitionId != 0) {
        PartitionId = other.PartitionId;
      }
      if (other.Position != 0L) {
        Position = other.Position;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PartitionId = input.ReadInt32();
            break;
          }
          case 16: {
            Position = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Packs all non-value info into a single field; the idea here is so we can embed the *Record messages into other
  /// messages (e.g. JobRecord and JobBatchRecord) by simply omitting the optional metadata field, but by setting it the
  /// message becomes a full fledged record. Also cuts down how much properties need to be duplicated if we want to have
  /// flat records.
  /// </summary>
  public sealed partial class RecordMetadata : pb::IMessage<RecordMetadata> {
    private static readonly pb::MessageParser<RecordMetadata> _parser = new pb::MessageParser<RecordMetadata>(() => new RecordMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ExporterProtocol.SchemaReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordMetadata(RecordMetadata other) : this() {
      partitionId_ = other.partitionId_;
      position_ = other.position_;
      raftTerm_ = other.raftTerm_;
      key_ = other.key_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      recordType_ = other.recordType_;
      intent_ = other.intent_;
      valueType_ = other.valueType_;
      sourceRecordPosition_ = other.sourceRecordPosition_;
      producerId_ = other.producerId_;
      rejectionType_ = other.rejectionType_;
      rejectionReason_ = other.rejectionReason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordMetadata Clone() {
      return new RecordMetadata(this);
    }

    /// <summary>Field number for the "partitionId" field.</summary>
    public const int PartitionIdFieldNumber = 1;
    private int partitionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PartitionId {
      get { return partitionId_; }
      set {
        partitionId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private long position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "raftTerm" field.</summary>
    public const int RaftTermFieldNumber = 3;
    private int raftTerm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RaftTerm {
      get { return raftTerm_; }
      set {
        raftTerm_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 4;
    private long key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "recordType" field.</summary>
    public const int RecordTypeFieldNumber = 6;
    private string recordType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RecordType {
      get { return recordType_; }
      set {
        recordType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "intent" field.</summary>
    public const int IntentFieldNumber = 7;
    private string intent_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Intent {
      get { return intent_; }
      set {
        intent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "valueType" field.</summary>
    public const int ValueTypeFieldNumber = 8;
    private string valueType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ValueType {
      get { return valueType_; }
      set {
        valueType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sourceRecordPosition" field.</summary>
    public const int SourceRecordPositionFieldNumber = 9;
    private long sourceRecordPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SourceRecordPosition {
      get { return sourceRecordPosition_; }
      set {
        sourceRecordPosition_ = value;
      }
    }

    /// <summary>Field number for the "producerId" field.</summary>
    public const int ProducerIdFieldNumber = 10;
    private int producerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProducerId {
      get { return producerId_; }
      set {
        producerId_ = value;
      }
    }

    /// <summary>Field number for the "rejectionType" field.</summary>
    public const int RejectionTypeFieldNumber = 11;
    private string rejectionType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RejectionType {
      get { return rejectionType_; }
      set {
        rejectionType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rejectionReason" field.</summary>
    public const int RejectionReasonFieldNumber = 12;
    private string rejectionReason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RejectionReason {
      get { return rejectionReason_; }
      set {
        rejectionReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PartitionId != other.PartitionId) return false;
      if (Position != other.Position) return false;
      if (RaftTerm != other.RaftTerm) return false;
      if (Key != other.Key) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (RecordType != other.RecordType) return false;
      if (Intent != other.Intent) return false;
      if (ValueType != other.ValueType) return false;
      if (SourceRecordPosition != other.SourceRecordPosition) return false;
      if (ProducerId != other.ProducerId) return false;
      if (RejectionType != other.RejectionType) return false;
      if (RejectionReason != other.RejectionReason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PartitionId != 0) hash ^= PartitionId.GetHashCode();
      if (Position != 0L) hash ^= Position.GetHashCode();
      if (RaftTerm != 0) hash ^= RaftTerm.GetHashCode();
      if (Key != 0L) hash ^= Key.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (RecordType.Length != 0) hash ^= RecordType.GetHashCode();
      if (Intent.Length != 0) hash ^= Intent.GetHashCode();
      if (ValueType.Length != 0) hash ^= ValueType.GetHashCode();
      if (SourceRecordPosition != 0L) hash ^= SourceRecordPosition.GetHashCode();
      if (ProducerId != 0) hash ^= ProducerId.GetHashCode();
      if (RejectionType.Length != 0) hash ^= RejectionType.GetHashCode();
      if (RejectionReason.Length != 0) hash ^= RejectionReason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PartitionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PartitionId);
      }
      if (Position != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Position);
      }
      if (RaftTerm != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RaftTerm);
      }
      if (Key != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Key);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Timestamp);
      }
      if (RecordType.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(RecordType);
      }
      if (Intent.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Intent);
      }
      if (ValueType.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ValueType);
      }
      if (SourceRecordPosition != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(SourceRecordPosition);
      }
      if (ProducerId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ProducerId);
      }
      if (RejectionType.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(RejectionType);
      }
      if (RejectionReason.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(RejectionReason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PartitionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PartitionId);
      }
      if (Position != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Position);
      }
      if (RaftTerm != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RaftTerm);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (RecordType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RecordType);
      }
      if (Intent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Intent);
      }
      if (ValueType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ValueType);
      }
      if (SourceRecordPosition != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SourceRecordPosition);
      }
      if (ProducerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProducerId);
      }
      if (RejectionType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RejectionType);
      }
      if (RejectionReason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RejectionReason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecordMetadata other) {
      if (other == null) {
        return;
      }
      if (other.PartitionId != 0) {
        PartitionId = other.PartitionId;
      }
      if (other.Position != 0L) {
        Position = other.Position;
      }
      if (other.RaftTerm != 0) {
        RaftTerm = other.RaftTerm;
      }
      if (other.Key != 0L) {
        Key = other.Key;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          timestamp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.RecordType.Length != 0) {
        RecordType = other.RecordType;
      }
      if (other.Intent.Length != 0) {
        Intent = other.Intent;
      }
      if (other.ValueType.Length != 0) {
        ValueType = other.ValueType;
      }
      if (other.SourceRecordPosition != 0L) {
        SourceRecordPosition = other.SourceRecordPosition;
      }
      if (other.ProducerId != 0) {
        ProducerId = other.ProducerId;
      }
      if (other.RejectionType.Length != 0) {
        RejectionType = other.RejectionType;
      }
      if (other.RejectionReason.Length != 0) {
        RejectionReason = other.RejectionReason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PartitionId = input.ReadInt32();
            break;
          }
          case 16: {
            Position = input.ReadInt64();
            break;
          }
          case 24: {
            RaftTerm = input.ReadInt32();
            break;
          }
          case 32: {
            Key = input.ReadInt64();
            break;
          }
          case 42: {
            if (timestamp_ == null) {
              timestamp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(timestamp_);
            break;
          }
          case 50: {
            RecordType = input.ReadString();
            break;
          }
          case 58: {
            Intent = input.ReadString();
            break;
          }
          case 66: {
            ValueType = input.ReadString();
            break;
          }
          case 72: {
            SourceRecordPosition = input.ReadInt64();
            break;
          }
          case 80: {
            ProducerId = input.ReadInt32();
            break;
          }
          case 90: {
            RejectionType = input.ReadString();
            break;
          }
          case 98: {
            RejectionReason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeploymentRecord : pb::IMessage<DeploymentRecord> {
    private static readonly pb::MessageParser<DeploymentRecord> _parser = new pb::MessageParser<DeploymentRecord>(() => new DeploymentRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeploymentRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ExporterProtocol.SchemaReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeploymentRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeploymentRecord(DeploymentRecord other) : this() {
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      resources_ = other.resources_.Clone();
      workflows_ = other.workflows_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeploymentRecord Clone() {
      return new DeploymentRecord(this);
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private global::ExporterProtocol.RecordMetadata metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ExporterProtocol.RecordMetadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "resources" field.</summary>
    public const int ResourcesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::ExporterProtocol.DeploymentRecord.Types.Resource> _repeated_resources_codec
        = pb::FieldCodec.ForMessage(18, global::ExporterProtocol.DeploymentRecord.Types.Resource.Parser);
    private readonly pbc::RepeatedField<global::ExporterProtocol.DeploymentRecord.Types.Resource> resources_ = new pbc::RepeatedField<global::ExporterProtocol.DeploymentRecord.Types.Resource>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ExporterProtocol.DeploymentRecord.Types.Resource> Resources {
      get { return resources_; }
    }

    /// <summary>Field number for the "workflows" field.</summary>
    public const int WorkflowsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::ExporterProtocol.DeploymentRecord.Types.Workflow> _repeated_workflows_codec
        = pb::FieldCodec.ForMessage(26, global::ExporterProtocol.DeploymentRecord.Types.Workflow.Parser);
    private readonly pbc::RepeatedField<global::ExporterProtocol.DeploymentRecord.Types.Workflow> workflows_ = new pbc::RepeatedField<global::ExporterProtocol.DeploymentRecord.Types.Workflow>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ExporterProtocol.DeploymentRecord.Types.Workflow> Workflows {
      get { return workflows_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeploymentRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeploymentRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if(!resources_.Equals(other.resources_)) return false;
      if(!workflows_.Equals(other.workflows_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      hash ^= resources_.GetHashCode();
      hash ^= workflows_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      resources_.WriteTo(output, _repeated_resources_codec);
      workflows_.WriteTo(output, _repeated_workflows_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      size += resources_.CalculateSize(_repeated_resources_codec);
      size += workflows_.CalculateSize(_repeated_workflows_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeploymentRecord other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          metadata_ = new global::ExporterProtocol.RecordMetadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      resources_.Add(other.resources_);
      workflows_.Add(other.workflows_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metadata_ == null) {
              metadata_ = new global::ExporterProtocol.RecordMetadata();
            }
            input.ReadMessage(metadata_);
            break;
          }
          case 18: {
            resources_.AddEntriesFrom(input, _repeated_resources_codec);
            break;
          }
          case 26: {
            workflows_.AddEntriesFrom(input, _repeated_workflows_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DeploymentRecord message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Resource : pb::IMessage<Resource> {
        private static readonly pb::MessageParser<Resource> _parser = new pb::MessageParser<Resource>(() => new Resource());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Resource> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::ExporterProtocol.DeploymentRecord.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Resource() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Resource(Resource other) : this() {
          resource_ = other.resource_;
          resourceType_ = other.resourceType_;
          resourceName_ = other.resourceName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Resource Clone() {
          return new Resource(this);
        }

        /// <summary>Field number for the "resource" field.</summary>
        public const int Resource_FieldNumber = 1;
        private pb::ByteString resource_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Resource_ {
          get { return resource_; }
          set {
            resource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "resourceType" field.</summary>
        public const int ResourceTypeFieldNumber = 2;
        private string resourceType_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ResourceType {
          get { return resourceType_; }
          set {
            resourceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "resourceName" field.</summary>
        public const int ResourceNameFieldNumber = 3;
        private string resourceName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ResourceName {
          get { return resourceName_; }
          set {
            resourceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Resource);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Resource other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Resource_ != other.Resource_) return false;
          if (ResourceType != other.ResourceType) return false;
          if (ResourceName != other.ResourceName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Resource_.Length != 0) hash ^= Resource_.GetHashCode();
          if (ResourceType.Length != 0) hash ^= ResourceType.GetHashCode();
          if (ResourceName.Length != 0) hash ^= ResourceName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Resource_.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(Resource_);
          }
          if (ResourceType.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ResourceType);
          }
          if (ResourceName.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(ResourceName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Resource_.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Resource_);
          }
          if (ResourceType.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceType);
          }
          if (ResourceName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Resource other) {
          if (other == null) {
            return;
          }
          if (other.Resource_.Length != 0) {
            Resource_ = other.Resource_;
          }
          if (other.ResourceType.Length != 0) {
            ResourceType = other.ResourceType;
          }
          if (other.ResourceName.Length != 0) {
            ResourceName = other.ResourceName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Resource_ = input.ReadBytes();
                break;
              }
              case 18: {
                ResourceType = input.ReadString();
                break;
              }
              case 26: {
                ResourceName = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Workflow : pb::IMessage<Workflow> {
        private static readonly pb::MessageParser<Workflow> _parser = new pb::MessageParser<Workflow>(() => new Workflow());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Workflow> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::ExporterProtocol.DeploymentRecord.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Workflow() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Workflow(Workflow other) : this() {
          bpmnProcessId_ = other.bpmnProcessId_;
          version_ = other.version_;
          workflowKey_ = other.workflowKey_;
          resourceName_ = other.resourceName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Workflow Clone() {
          return new Workflow(this);
        }

        /// <summary>Field number for the "bpmnProcessId" field.</summary>
        public const int BpmnProcessIdFieldNumber = 1;
        private string bpmnProcessId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string BpmnProcessId {
          get { return bpmnProcessId_; }
          set {
            bpmnProcessId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 2;
        private int version_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Version {
          get { return version_; }
          set {
            version_ = value;
          }
        }

        /// <summary>Field number for the "workflowKey" field.</summary>
        public const int WorkflowKeyFieldNumber = 3;
        private long workflowKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long WorkflowKey {
          get { return workflowKey_; }
          set {
            workflowKey_ = value;
          }
        }

        /// <summary>Field number for the "resourceName" field.</summary>
        public const int ResourceNameFieldNumber = 5;
        private string resourceName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ResourceName {
          get { return resourceName_; }
          set {
            resourceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Workflow);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Workflow other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (BpmnProcessId != other.BpmnProcessId) return false;
          if (Version != other.Version) return false;
          if (WorkflowKey != other.WorkflowKey) return false;
          if (ResourceName != other.ResourceName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (BpmnProcessId.Length != 0) hash ^= BpmnProcessId.GetHashCode();
          if (Version != 0) hash ^= Version.GetHashCode();
          if (WorkflowKey != 0L) hash ^= WorkflowKey.GetHashCode();
          if (ResourceName.Length != 0) hash ^= ResourceName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (BpmnProcessId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(BpmnProcessId);
          }
          if (Version != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Version);
          }
          if (WorkflowKey != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(WorkflowKey);
          }
          if (ResourceName.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(ResourceName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (BpmnProcessId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(BpmnProcessId);
          }
          if (Version != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
          }
          if (WorkflowKey != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(WorkflowKey);
          }
          if (ResourceName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Workflow other) {
          if (other == null) {
            return;
          }
          if (other.BpmnProcessId.Length != 0) {
            BpmnProcessId = other.BpmnProcessId;
          }
          if (other.Version != 0) {
            Version = other.Version;
          }
          if (other.WorkflowKey != 0L) {
            WorkflowKey = other.WorkflowKey;
          }
          if (other.ResourceName.Length != 0) {
            ResourceName = other.ResourceName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                BpmnProcessId = input.ReadString();
                break;
              }
              case 16: {
                Version = input.ReadInt32();
                break;
              }
              case 24: {
                WorkflowKey = input.ReadInt64();
                break;
              }
              case 42: {
                ResourceName = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class IncidentRecord : pb::IMessage<IncidentRecord> {
    private static readonly pb::MessageParser<IncidentRecord> _parser = new pb::MessageParser<IncidentRecord>(() => new IncidentRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IncidentRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ExporterProtocol.SchemaReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncidentRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncidentRecord(IncidentRecord other) : this() {
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      errorType_ = other.errorType_;
      errorMessage_ = other.errorMessage_;
      bpmnProcessId_ = other.bpmnProcessId_;
      workflowInstanceKey_ = other.workflowInstanceKey_;
      elementId_ = other.elementId_;
      elementInstanceKey_ = other.elementInstanceKey_;
      jobKey_ = other.jobKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncidentRecord Clone() {
      return new IncidentRecord(this);
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private global::ExporterProtocol.RecordMetadata metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ExporterProtocol.RecordMetadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "errorType" field.</summary>
    public const int ErrorTypeFieldNumber = 2;
    private string errorType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorType {
      get { return errorType_; }
      set {
        errorType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "errorMessage" field.</summary>
    public const int ErrorMessageFieldNumber = 3;
    private string errorMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMessage {
      get { return errorMessage_; }
      set {
        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bpmnProcessId" field.</summary>
    public const int BpmnProcessIdFieldNumber = 4;
    private string bpmnProcessId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BpmnProcessId {
      get { return bpmnProcessId_; }
      set {
        bpmnProcessId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "workflowInstanceKey" field.</summary>
    public const int WorkflowInstanceKeyFieldNumber = 5;
    private long workflowInstanceKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WorkflowInstanceKey {
      get { return workflowInstanceKey_; }
      set {
        workflowInstanceKey_ = value;
      }
    }

    /// <summary>Field number for the "elementId" field.</summary>
    public const int ElementIdFieldNumber = 6;
    private string elementId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ElementId {
      get { return elementId_; }
      set {
        elementId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "elementInstanceKey" field.</summary>
    public const int ElementInstanceKeyFieldNumber = 7;
    private long elementInstanceKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ElementInstanceKey {
      get { return elementInstanceKey_; }
      set {
        elementInstanceKey_ = value;
      }
    }

    /// <summary>Field number for the "jobKey" field.</summary>
    public const int JobKeyFieldNumber = 8;
    private long jobKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long JobKey {
      get { return jobKey_; }
      set {
        jobKey_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IncidentRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IncidentRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (ErrorType != other.ErrorType) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      if (BpmnProcessId != other.BpmnProcessId) return false;
      if (WorkflowInstanceKey != other.WorkflowInstanceKey) return false;
      if (ElementId != other.ElementId) return false;
      if (ElementInstanceKey != other.ElementInstanceKey) return false;
      if (JobKey != other.JobKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (ErrorType.Length != 0) hash ^= ErrorType.GetHashCode();
      if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
      if (BpmnProcessId.Length != 0) hash ^= BpmnProcessId.GetHashCode();
      if (WorkflowInstanceKey != 0L) hash ^= WorkflowInstanceKey.GetHashCode();
      if (ElementId.Length != 0) hash ^= ElementId.GetHashCode();
      if (ElementInstanceKey != 0L) hash ^= ElementInstanceKey.GetHashCode();
      if (JobKey != 0L) hash ^= JobKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      if (ErrorType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrorType);
      }
      if (ErrorMessage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ErrorMessage);
      }
      if (BpmnProcessId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(BpmnProcessId);
      }
      if (WorkflowInstanceKey != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(WorkflowInstanceKey);
      }
      if (ElementId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ElementId);
      }
      if (ElementInstanceKey != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(ElementInstanceKey);
      }
      if (JobKey != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(JobKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (ErrorType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorType);
      }
      if (ErrorMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      if (BpmnProcessId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BpmnProcessId);
      }
      if (WorkflowInstanceKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WorkflowInstanceKey);
      }
      if (ElementId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ElementId);
      }
      if (ElementInstanceKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ElementInstanceKey);
      }
      if (JobKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(JobKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IncidentRecord other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          metadata_ = new global::ExporterProtocol.RecordMetadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.ErrorType.Length != 0) {
        ErrorType = other.ErrorType;
      }
      if (other.ErrorMessage.Length != 0) {
        ErrorMessage = other.ErrorMessage;
      }
      if (other.BpmnProcessId.Length != 0) {
        BpmnProcessId = other.BpmnProcessId;
      }
      if (other.WorkflowInstanceKey != 0L) {
        WorkflowInstanceKey = other.WorkflowInstanceKey;
      }
      if (other.ElementId.Length != 0) {
        ElementId = other.ElementId;
      }
      if (other.ElementInstanceKey != 0L) {
        ElementInstanceKey = other.ElementInstanceKey;
      }
      if (other.JobKey != 0L) {
        JobKey = other.JobKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metadata_ == null) {
              metadata_ = new global::ExporterProtocol.RecordMetadata();
            }
            input.ReadMessage(metadata_);
            break;
          }
          case 18: {
            ErrorType = input.ReadString();
            break;
          }
          case 26: {
            ErrorMessage = input.ReadString();
            break;
          }
          case 34: {
            BpmnProcessId = input.ReadString();
            break;
          }
          case 40: {
            WorkflowInstanceKey = input.ReadInt64();
            break;
          }
          case 50: {
            ElementId = input.ReadString();
            break;
          }
          case 56: {
            ElementInstanceKey = input.ReadInt64();
            break;
          }
          case 64: {
            JobKey = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JobRecord : pb::IMessage<JobRecord> {
    private static readonly pb::MessageParser<JobRecord> _parser = new pb::MessageParser<JobRecord>(() => new JobRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JobRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ExporterProtocol.SchemaReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobRecord(JobRecord other) : this() {
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      type_ = other.type_;
      headers_ = other.headers_ != null ? other.headers_.Clone() : null;
      customHeaders_ = other.customHeaders_ != null ? other.customHeaders_.Clone() : null;
      worker_ = other.worker_;
      retries_ = other.retries_;
      deadline_ = other.deadline_ != null ? other.deadline_.Clone() : null;
      errorMessage_ = other.errorMessage_;
      payload_ = other.payload_ != null ? other.payload_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobRecord Clone() {
      return new JobRecord(this);
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private global::ExporterProtocol.RecordMetadata metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ExporterProtocol.RecordMetadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "headers" field.</summary>
    public const int HeadersFieldNumber = 3;
    private global::ExporterProtocol.JobRecord.Types.Headers headers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ExporterProtocol.JobRecord.Types.Headers Headers {
      get { return headers_; }
      set {
        headers_ = value;
      }
    }

    /// <summary>Field number for the "customHeaders" field.</summary>
    public const int CustomHeadersFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Struct customHeaders_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct CustomHeaders {
      get { return customHeaders_; }
      set {
        customHeaders_ = value;
      }
    }

    /// <summary>Field number for the "worker" field.</summary>
    public const int WorkerFieldNumber = 5;
    private string worker_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Worker {
      get { return worker_; }
      set {
        worker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "retries" field.</summary>
    public const int RetriesFieldNumber = 6;
    private int retries_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Retries {
      get { return retries_; }
      set {
        retries_ = value;
      }
    }

    /// <summary>Field number for the "deadline" field.</summary>
    public const int DeadlineFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp deadline_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Deadline {
      get { return deadline_; }
      set {
        deadline_ = value;
      }
    }

    /// <summary>Field number for the "errorMessage" field.</summary>
    public const int ErrorMessageFieldNumber = 8;
    private string errorMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMessage {
      get { return errorMessage_; }
      set {
        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 9;
    private global::Google.Protobuf.WellKnownTypes.Struct payload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Payload {
      get { return payload_; }
      set {
        payload_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JobRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JobRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(Headers, other.Headers)) return false;
      if (!object.Equals(CustomHeaders, other.CustomHeaders)) return false;
      if (Worker != other.Worker) return false;
      if (Retries != other.Retries) return false;
      if (!object.Equals(Deadline, other.Deadline)) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      if (!object.Equals(Payload, other.Payload)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (headers_ != null) hash ^= Headers.GetHashCode();
      if (customHeaders_ != null) hash ^= CustomHeaders.GetHashCode();
      if (Worker.Length != 0) hash ^= Worker.GetHashCode();
      if (Retries != 0) hash ^= Retries.GetHashCode();
      if (deadline_ != null) hash ^= Deadline.GetHashCode();
      if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
      if (payload_ != null) hash ^= Payload.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (headers_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Headers);
      }
      if (customHeaders_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CustomHeaders);
      }
      if (Worker.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Worker);
      }
      if (Retries != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Retries);
      }
      if (deadline_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Deadline);
      }
      if (ErrorMessage.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ErrorMessage);
      }
      if (payload_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Payload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (headers_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Headers);
      }
      if (customHeaders_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CustomHeaders);
      }
      if (Worker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Worker);
      }
      if (Retries != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Retries);
      }
      if (deadline_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deadline);
      }
      if (ErrorMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      if (payload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JobRecord other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          metadata_ = new global::ExporterProtocol.RecordMetadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.headers_ != null) {
        if (headers_ == null) {
          headers_ = new global::ExporterProtocol.JobRecord.Types.Headers();
        }
        Headers.MergeFrom(other.Headers);
      }
      if (other.customHeaders_ != null) {
        if (customHeaders_ == null) {
          customHeaders_ = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        CustomHeaders.MergeFrom(other.CustomHeaders);
      }
      if (other.Worker.Length != 0) {
        Worker = other.Worker;
      }
      if (other.Retries != 0) {
        Retries = other.Retries;
      }
      if (other.deadline_ != null) {
        if (deadline_ == null) {
          deadline_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Deadline.MergeFrom(other.Deadline);
      }
      if (other.ErrorMessage.Length != 0) {
        ErrorMessage = other.ErrorMessage;
      }
      if (other.payload_ != null) {
        if (payload_ == null) {
          payload_ = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Payload.MergeFrom(other.Payload);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metadata_ == null) {
              metadata_ = new global::ExporterProtocol.RecordMetadata();
            }
            input.ReadMessage(metadata_);
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            if (headers_ == null) {
              headers_ = new global::ExporterProtocol.JobRecord.Types.Headers();
            }
            input.ReadMessage(headers_);
            break;
          }
          case 34: {
            if (customHeaders_ == null) {
              customHeaders_ = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(customHeaders_);
            break;
          }
          case 42: {
            Worker = input.ReadString();
            break;
          }
          case 48: {
            Retries = input.ReadInt32();
            break;
          }
          case 58: {
            if (deadline_ == null) {
              deadline_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(deadline_);
            break;
          }
          case 66: {
            ErrorMessage = input.ReadString();
            break;
          }
          case 74: {
            if (payload_ == null) {
              payload_ = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(payload_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the JobRecord message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Headers : pb::IMessage<Headers> {
        private static readonly pb::MessageParser<Headers> _parser = new pb::MessageParser<Headers>(() => new Headers());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Headers> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::ExporterProtocol.JobRecord.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Headers() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Headers(Headers other) : this() {
          elementId_ = other.elementId_;
          elementInstanceKey_ = other.elementInstanceKey_;
          bpmnProcessId_ = other.bpmnProcessId_;
          workflowDefinitionVersion_ = other.workflowDefinitionVersion_;
          workflowInstanceKey_ = other.workflowInstanceKey_;
          workflowKey_ = other.workflowKey_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Headers Clone() {
          return new Headers(this);
        }

        /// <summary>Field number for the "elementId" field.</summary>
        public const int ElementIdFieldNumber = 1;
        private string elementId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ElementId {
          get { return elementId_; }
          set {
            elementId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "elementInstanceKey" field.</summary>
        public const int ElementInstanceKeyFieldNumber = 2;
        private long elementInstanceKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ElementInstanceKey {
          get { return elementInstanceKey_; }
          set {
            elementInstanceKey_ = value;
          }
        }

        /// <summary>Field number for the "bpmnProcessId" field.</summary>
        public const int BpmnProcessIdFieldNumber = 3;
        private string bpmnProcessId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string BpmnProcessId {
          get { return bpmnProcessId_; }
          set {
            bpmnProcessId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "workflowDefinitionVersion" field.</summary>
        public const int WorkflowDefinitionVersionFieldNumber = 4;
        private int workflowDefinitionVersion_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int WorkflowDefinitionVersion {
          get { return workflowDefinitionVersion_; }
          set {
            workflowDefinitionVersion_ = value;
          }
        }

        /// <summary>Field number for the "workflowInstanceKey" field.</summary>
        public const int WorkflowInstanceKeyFieldNumber = 5;
        private long workflowInstanceKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long WorkflowInstanceKey {
          get { return workflowInstanceKey_; }
          set {
            workflowInstanceKey_ = value;
          }
        }

        /// <summary>Field number for the "workflowKey" field.</summary>
        public const int WorkflowKeyFieldNumber = 6;
        private long workflowKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long WorkflowKey {
          get { return workflowKey_; }
          set {
            workflowKey_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Headers);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Headers other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ElementId != other.ElementId) return false;
          if (ElementInstanceKey != other.ElementInstanceKey) return false;
          if (BpmnProcessId != other.BpmnProcessId) return false;
          if (WorkflowDefinitionVersion != other.WorkflowDefinitionVersion) return false;
          if (WorkflowInstanceKey != other.WorkflowInstanceKey) return false;
          if (WorkflowKey != other.WorkflowKey) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ElementId.Length != 0) hash ^= ElementId.GetHashCode();
          if (ElementInstanceKey != 0L) hash ^= ElementInstanceKey.GetHashCode();
          if (BpmnProcessId.Length != 0) hash ^= BpmnProcessId.GetHashCode();
          if (WorkflowDefinitionVersion != 0) hash ^= WorkflowDefinitionVersion.GetHashCode();
          if (WorkflowInstanceKey != 0L) hash ^= WorkflowInstanceKey.GetHashCode();
          if (WorkflowKey != 0L) hash ^= WorkflowKey.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ElementId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ElementId);
          }
          if (ElementInstanceKey != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(ElementInstanceKey);
          }
          if (BpmnProcessId.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(BpmnProcessId);
          }
          if (WorkflowDefinitionVersion != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(WorkflowDefinitionVersion);
          }
          if (WorkflowInstanceKey != 0L) {
            output.WriteRawTag(40);
            output.WriteInt64(WorkflowInstanceKey);
          }
          if (WorkflowKey != 0L) {
            output.WriteRawTag(48);
            output.WriteInt64(WorkflowKey);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ElementId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ElementId);
          }
          if (ElementInstanceKey != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ElementInstanceKey);
          }
          if (BpmnProcessId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(BpmnProcessId);
          }
          if (WorkflowDefinitionVersion != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(WorkflowDefinitionVersion);
          }
          if (WorkflowInstanceKey != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(WorkflowInstanceKey);
          }
          if (WorkflowKey != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(WorkflowKey);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Headers other) {
          if (other == null) {
            return;
          }
          if (other.ElementId.Length != 0) {
            ElementId = other.ElementId;
          }
          if (other.ElementInstanceKey != 0L) {
            ElementInstanceKey = other.ElementInstanceKey;
          }
          if (other.BpmnProcessId.Length != 0) {
            BpmnProcessId = other.BpmnProcessId;
          }
          if (other.WorkflowDefinitionVersion != 0) {
            WorkflowDefinitionVersion = other.WorkflowDefinitionVersion;
          }
          if (other.WorkflowInstanceKey != 0L) {
            WorkflowInstanceKey = other.WorkflowInstanceKey;
          }
          if (other.WorkflowKey != 0L) {
            WorkflowKey = other.WorkflowKey;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ElementId = input.ReadString();
                break;
              }
              case 16: {
                ElementInstanceKey = input.ReadInt64();
                break;
              }
              case 26: {
                BpmnProcessId = input.ReadString();
                break;
              }
              case 32: {
                WorkflowDefinitionVersion = input.ReadInt32();
                break;
              }
              case 40: {
                WorkflowInstanceKey = input.ReadInt64();
                break;
              }
              case 48: {
                WorkflowKey = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class JobBatchRecord : pb::IMessage<JobBatchRecord> {
    private static readonly pb::MessageParser<JobBatchRecord> _parser = new pb::MessageParser<JobBatchRecord>(() => new JobBatchRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JobBatchRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ExporterProtocol.SchemaReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobBatchRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobBatchRecord(JobBatchRecord other) : this() {
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      type_ = other.type_;
      worker_ = other.worker_;
      timeout_ = other.timeout_;
      amount_ = other.amount_;
      jobKeys_ = other.jobKeys_.Clone();
      jobs_ = other.jobs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobBatchRecord Clone() {
      return new JobBatchRecord(this);
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private global::ExporterProtocol.RecordMetadata metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ExporterProtocol.RecordMetadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "worker" field.</summary>
    public const int WorkerFieldNumber = 3;
    private string worker_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Worker {
      get { return worker_; }
      set {
        worker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timeout" field.</summary>
    public const int TimeoutFieldNumber = 4;
    private long timeout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timeout {
      get { return timeout_; }
      set {
        timeout_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 5;
    private int amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "jobKeys" field.</summary>
    public const int JobKeysFieldNumber = 6;
    private static readonly pb::FieldCodec<long> _repeated_jobKeys_codec
        = pb::FieldCodec.ForInt64(50);
    private readonly pbc::RepeatedField<long> jobKeys_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> JobKeys {
      get { return jobKeys_; }
    }

    /// <summary>Field number for the "jobs" field.</summary>
    public const int JobsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::ExporterProtocol.JobRecord> _repeated_jobs_codec
        = pb::FieldCodec.ForMessage(58, global::ExporterProtocol.JobRecord.Parser);
    private readonly pbc::RepeatedField<global::ExporterProtocol.JobRecord> jobs_ = new pbc::RepeatedField<global::ExporterProtocol.JobRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ExporterProtocol.JobRecord> Jobs {
      get { return jobs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JobBatchRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JobBatchRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (Type != other.Type) return false;
      if (Worker != other.Worker) return false;
      if (Timeout != other.Timeout) return false;
      if (Amount != other.Amount) return false;
      if(!jobKeys_.Equals(other.jobKeys_)) return false;
      if(!jobs_.Equals(other.jobs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Worker.Length != 0) hash ^= Worker.GetHashCode();
      if (Timeout != 0L) hash ^= Timeout.GetHashCode();
      if (Amount != 0) hash ^= Amount.GetHashCode();
      hash ^= jobKeys_.GetHashCode();
      hash ^= jobs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (Worker.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Worker);
      }
      if (Timeout != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Timeout);
      }
      if (Amount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Amount);
      }
      jobKeys_.WriteTo(output, _repeated_jobKeys_codec);
      jobs_.WriteTo(output, _repeated_jobs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Worker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Worker);
      }
      if (Timeout != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timeout);
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      size += jobKeys_.CalculateSize(_repeated_jobKeys_codec);
      size += jobs_.CalculateSize(_repeated_jobs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JobBatchRecord other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          metadata_ = new global::ExporterProtocol.RecordMetadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Worker.Length != 0) {
        Worker = other.Worker;
      }
      if (other.Timeout != 0L) {
        Timeout = other.Timeout;
      }
      if (other.Amount != 0) {
        Amount = other.Amount;
      }
      jobKeys_.Add(other.jobKeys_);
      jobs_.Add(other.jobs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metadata_ == null) {
              metadata_ = new global::ExporterProtocol.RecordMetadata();
            }
            input.ReadMessage(metadata_);
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            Worker = input.ReadString();
            break;
          }
          case 32: {
            Timeout = input.ReadInt64();
            break;
          }
          case 40: {
            Amount = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            jobKeys_.AddEntriesFrom(input, _repeated_jobKeys_codec);
            break;
          }
          case 58: {
            jobs_.AddEntriesFrom(input, _repeated_jobs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MessageRecord : pb::IMessage<MessageRecord> {
    private static readonly pb::MessageParser<MessageRecord> _parser = new pb::MessageParser<MessageRecord>(() => new MessageRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ExporterProtocol.SchemaReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageRecord(MessageRecord other) : this() {
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      name_ = other.name_;
      correlationKey_ = other.correlationKey_;
      messageId_ = other.messageId_;
      timeToLive_ = other.timeToLive_;
      payload_ = other.payload_ != null ? other.payload_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageRecord Clone() {
      return new MessageRecord(this);
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private global::ExporterProtocol.RecordMetadata metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ExporterProtocol.RecordMetadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "correlationKey" field.</summary>
    public const int CorrelationKeyFieldNumber = 3;
    private string correlationKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CorrelationKey {
      get { return correlationKey_; }
      set {
        correlationKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "messageId" field.</summary>
    public const int MessageIdFieldNumber = 4;
    private string messageId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageId {
      get { return messageId_; }
      set {
        messageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timeToLive" field.</summary>
    public const int TimeToLiveFieldNumber = 5;
    private long timeToLive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeToLive {
      get { return timeToLive_; }
      set {
        timeToLive_ = value;
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Struct payload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Payload {
      get { return payload_; }
      set {
        payload_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (Name != other.Name) return false;
      if (CorrelationKey != other.CorrelationKey) return false;
      if (MessageId != other.MessageId) return false;
      if (TimeToLive != other.TimeToLive) return false;
      if (!object.Equals(Payload, other.Payload)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (CorrelationKey.Length != 0) hash ^= CorrelationKey.GetHashCode();
      if (MessageId.Length != 0) hash ^= MessageId.GetHashCode();
      if (TimeToLive != 0L) hash ^= TimeToLive.GetHashCode();
      if (payload_ != null) hash ^= Payload.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (CorrelationKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CorrelationKey);
      }
      if (MessageId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MessageId);
      }
      if (TimeToLive != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TimeToLive);
      }
      if (payload_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Payload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (CorrelationKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CorrelationKey);
      }
      if (MessageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageId);
      }
      if (TimeToLive != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeToLive);
      }
      if (payload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageRecord other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          metadata_ = new global::ExporterProtocol.RecordMetadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.CorrelationKey.Length != 0) {
        CorrelationKey = other.CorrelationKey;
      }
      if (other.MessageId.Length != 0) {
        MessageId = other.MessageId;
      }
      if (other.TimeToLive != 0L) {
        TimeToLive = other.TimeToLive;
      }
      if (other.payload_ != null) {
        if (payload_ == null) {
          payload_ = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Payload.MergeFrom(other.Payload);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metadata_ == null) {
              metadata_ = new global::ExporterProtocol.RecordMetadata();
            }
            input.ReadMessage(metadata_);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            CorrelationKey = input.ReadString();
            break;
          }
          case 34: {
            MessageId = input.ReadString();
            break;
          }
          case 40: {
            TimeToLive = input.ReadInt64();
            break;
          }
          case 50: {
            if (payload_ == null) {
              payload_ = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(payload_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MessageSubscriptionRecord : pb::IMessage<MessageSubscriptionRecord> {
    private static readonly pb::MessageParser<MessageSubscriptionRecord> _parser = new pb::MessageParser<MessageSubscriptionRecord>(() => new MessageSubscriptionRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageSubscriptionRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ExporterProtocol.SchemaReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageSubscriptionRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageSubscriptionRecord(MessageSubscriptionRecord other) : this() {
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      workflowInstanceKey_ = other.workflowInstanceKey_;
      elementInstanceKey_ = other.elementInstanceKey_;
      messageName_ = other.messageName_;
      correlationKey_ = other.correlationKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageSubscriptionRecord Clone() {
      return new MessageSubscriptionRecord(this);
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private global::ExporterProtocol.RecordMetadata metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ExporterProtocol.RecordMetadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "workflowInstanceKey" field.</summary>
    public const int WorkflowInstanceKeyFieldNumber = 2;
    private long workflowInstanceKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WorkflowInstanceKey {
      get { return workflowInstanceKey_; }
      set {
        workflowInstanceKey_ = value;
      }
    }

    /// <summary>Field number for the "elementInstanceKey" field.</summary>
    public const int ElementInstanceKeyFieldNumber = 3;
    private long elementInstanceKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ElementInstanceKey {
      get { return elementInstanceKey_; }
      set {
        elementInstanceKey_ = value;
      }
    }

    /// <summary>Field number for the "messageName" field.</summary>
    public const int MessageNameFieldNumber = 4;
    private string messageName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageName {
      get { return messageName_; }
      set {
        messageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "correlationKey" field.</summary>
    public const int CorrelationKeyFieldNumber = 5;
    private string correlationKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CorrelationKey {
      get { return correlationKey_; }
      set {
        correlationKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageSubscriptionRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageSubscriptionRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (WorkflowInstanceKey != other.WorkflowInstanceKey) return false;
      if (ElementInstanceKey != other.ElementInstanceKey) return false;
      if (MessageName != other.MessageName) return false;
      if (CorrelationKey != other.CorrelationKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (WorkflowInstanceKey != 0L) hash ^= WorkflowInstanceKey.GetHashCode();
      if (ElementInstanceKey != 0L) hash ^= ElementInstanceKey.GetHashCode();
      if (MessageName.Length != 0) hash ^= MessageName.GetHashCode();
      if (CorrelationKey.Length != 0) hash ^= CorrelationKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      if (WorkflowInstanceKey != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(WorkflowInstanceKey);
      }
      if (ElementInstanceKey != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ElementInstanceKey);
      }
      if (MessageName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MessageName);
      }
      if (CorrelationKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CorrelationKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (WorkflowInstanceKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WorkflowInstanceKey);
      }
      if (ElementInstanceKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ElementInstanceKey);
      }
      if (MessageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageName);
      }
      if (CorrelationKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CorrelationKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageSubscriptionRecord other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          metadata_ = new global::ExporterProtocol.RecordMetadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.WorkflowInstanceKey != 0L) {
        WorkflowInstanceKey = other.WorkflowInstanceKey;
      }
      if (other.ElementInstanceKey != 0L) {
        ElementInstanceKey = other.ElementInstanceKey;
      }
      if (other.MessageName.Length != 0) {
        MessageName = other.MessageName;
      }
      if (other.CorrelationKey.Length != 0) {
        CorrelationKey = other.CorrelationKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metadata_ == null) {
              metadata_ = new global::ExporterProtocol.RecordMetadata();
            }
            input.ReadMessage(metadata_);
            break;
          }
          case 16: {
            WorkflowInstanceKey = input.ReadInt64();
            break;
          }
          case 24: {
            ElementInstanceKey = input.ReadInt64();
            break;
          }
          case 34: {
            MessageName = input.ReadString();
            break;
          }
          case 42: {
            CorrelationKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MessageStartEventSubscriptionRecord : pb::IMessage<MessageStartEventSubscriptionRecord> {
    private static readonly pb::MessageParser<MessageStartEventSubscriptionRecord> _parser = new pb::MessageParser<MessageStartEventSubscriptionRecord>(() => new MessageStartEventSubscriptionRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageStartEventSubscriptionRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ExporterProtocol.SchemaReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageStartEventSubscriptionRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageStartEventSubscriptionRecord(MessageStartEventSubscriptionRecord other) : this() {
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      workflowKey_ = other.workflowKey_;
      startEventId_ = other.startEventId_;
      messageName_ = other.messageName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageStartEventSubscriptionRecord Clone() {
      return new MessageStartEventSubscriptionRecord(this);
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private global::ExporterProtocol.RecordMetadata metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ExporterProtocol.RecordMetadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "workflowKey" field.</summary>
    public const int WorkflowKeyFieldNumber = 2;
    private long workflowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WorkflowKey {
      get { return workflowKey_; }
      set {
        workflowKey_ = value;
      }
    }

    /// <summary>Field number for the "startEventId" field.</summary>
    public const int StartEventIdFieldNumber = 3;
    private string startEventId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartEventId {
      get { return startEventId_; }
      set {
        startEventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "messageName" field.</summary>
    public const int MessageNameFieldNumber = 4;
    private string messageName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageName {
      get { return messageName_; }
      set {
        messageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageStartEventSubscriptionRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageStartEventSubscriptionRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (WorkflowKey != other.WorkflowKey) return false;
      if (StartEventId != other.StartEventId) return false;
      if (MessageName != other.MessageName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (WorkflowKey != 0L) hash ^= WorkflowKey.GetHashCode();
      if (StartEventId.Length != 0) hash ^= StartEventId.GetHashCode();
      if (MessageName.Length != 0) hash ^= MessageName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      if (WorkflowKey != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(WorkflowKey);
      }
      if (StartEventId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StartEventId);
      }
      if (MessageName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MessageName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (WorkflowKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WorkflowKey);
      }
      if (StartEventId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartEventId);
      }
      if (MessageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageStartEventSubscriptionRecord other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          metadata_ = new global::ExporterProtocol.RecordMetadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.WorkflowKey != 0L) {
        WorkflowKey = other.WorkflowKey;
      }
      if (other.StartEventId.Length != 0) {
        StartEventId = other.StartEventId;
      }
      if (other.MessageName.Length != 0) {
        MessageName = other.MessageName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metadata_ == null) {
              metadata_ = new global::ExporterProtocol.RecordMetadata();
            }
            input.ReadMessage(metadata_);
            break;
          }
          case 16: {
            WorkflowKey = input.ReadInt64();
            break;
          }
          case 26: {
            StartEventId = input.ReadString();
            break;
          }
          case 34: {
            MessageName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// could be flattened
  /// </summary>
  public sealed partial class RaftRecord : pb::IMessage<RaftRecord> {
    private static readonly pb::MessageParser<RaftRecord> _parser = new pb::MessageParser<RaftRecord>(() => new RaftRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RaftRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ExporterProtocol.SchemaReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaftRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaftRecord(RaftRecord other) : this() {
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      members_ = other.members_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaftRecord Clone() {
      return new RaftRecord(this);
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private global::ExporterProtocol.RecordMetadata metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ExporterProtocol.RecordMetadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::ExporterProtocol.RaftRecord.Types.Member> _repeated_members_codec
        = pb::FieldCodec.ForMessage(18, global::ExporterProtocol.RaftRecord.Types.Member.Parser);
    private readonly pbc::RepeatedField<global::ExporterProtocol.RaftRecord.Types.Member> members_ = new pbc::RepeatedField<global::ExporterProtocol.RaftRecord.Types.Member>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ExporterProtocol.RaftRecord.Types.Member> Members {
      get { return members_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RaftRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RaftRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if(!members_.Equals(other.members_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      hash ^= members_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      members_.WriteTo(output, _repeated_members_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RaftRecord other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          metadata_ = new global::ExporterProtocol.RecordMetadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      members_.Add(other.members_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metadata_ == null) {
              metadata_ = new global::ExporterProtocol.RecordMetadata();
            }
            input.ReadMessage(metadata_);
            break;
          }
          case 18: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RaftRecord message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Member : pb::IMessage<Member> {
        private static readonly pb::MessageParser<Member> _parser = new pb::MessageParser<Member>(() => new Member());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Member> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::ExporterProtocol.RaftRecord.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Member() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Member(Member other) : this() {
          nodeId_ = other.nodeId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Member Clone() {
          return new Member(this);
        }

        /// <summary>Field number for the "nodeId" field.</summary>
        public const int NodeIdFieldNumber = 1;
        private int nodeId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int NodeId {
          get { return nodeId_; }
          set {
            nodeId_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Member);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Member other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (NodeId != other.NodeId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (NodeId != 0) hash ^= NodeId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (NodeId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(NodeId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (NodeId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NodeId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Member other) {
          if (other == null) {
            return;
          }
          if (other.NodeId != 0) {
            NodeId = other.NodeId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                NodeId = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class TimerRecord : pb::IMessage<TimerRecord> {
    private static readonly pb::MessageParser<TimerRecord> _parser = new pb::MessageParser<TimerRecord>(() => new TimerRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimerRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ExporterProtocol.SchemaReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimerRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimerRecord(TimerRecord other) : this() {
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      elementInstanceKey_ = other.elementInstanceKey_;
      dueDate_ = other.dueDate_;
      handlerFlowNodeId_ = other.handlerFlowNodeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimerRecord Clone() {
      return new TimerRecord(this);
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private global::ExporterProtocol.RecordMetadata metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ExporterProtocol.RecordMetadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "elementInstanceKey" field.</summary>
    public const int ElementInstanceKeyFieldNumber = 2;
    private long elementInstanceKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ElementInstanceKey {
      get { return elementInstanceKey_; }
      set {
        elementInstanceKey_ = value;
      }
    }

    /// <summary>Field number for the "dueDate" field.</summary>
    public const int DueDateFieldNumber = 3;
    private long dueDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DueDate {
      get { return dueDate_; }
      set {
        dueDate_ = value;
      }
    }

    /// <summary>Field number for the "handlerFlowNodeId" field.</summary>
    public const int HandlerFlowNodeIdFieldNumber = 4;
    private string handlerFlowNodeId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HandlerFlowNodeId {
      get { return handlerFlowNodeId_; }
      set {
        handlerFlowNodeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimerRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimerRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (ElementInstanceKey != other.ElementInstanceKey) return false;
      if (DueDate != other.DueDate) return false;
      if (HandlerFlowNodeId != other.HandlerFlowNodeId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (ElementInstanceKey != 0L) hash ^= ElementInstanceKey.GetHashCode();
      if (DueDate != 0L) hash ^= DueDate.GetHashCode();
      if (HandlerFlowNodeId.Length != 0) hash ^= HandlerFlowNodeId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      if (ElementInstanceKey != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ElementInstanceKey);
      }
      if (DueDate != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(DueDate);
      }
      if (HandlerFlowNodeId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(HandlerFlowNodeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (ElementInstanceKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ElementInstanceKey);
      }
      if (DueDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DueDate);
      }
      if (HandlerFlowNodeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HandlerFlowNodeId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimerRecord other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          metadata_ = new global::ExporterProtocol.RecordMetadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.ElementInstanceKey != 0L) {
        ElementInstanceKey = other.ElementInstanceKey;
      }
      if (other.DueDate != 0L) {
        DueDate = other.DueDate;
      }
      if (other.HandlerFlowNodeId.Length != 0) {
        HandlerFlowNodeId = other.HandlerFlowNodeId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metadata_ == null) {
              metadata_ = new global::ExporterProtocol.RecordMetadata();
            }
            input.ReadMessage(metadata_);
            break;
          }
          case 16: {
            ElementInstanceKey = input.ReadInt64();
            break;
          }
          case 24: {
            DueDate = input.ReadInt64();
            break;
          }
          case 34: {
            HandlerFlowNodeId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WorkflowInstanceRecord : pb::IMessage<WorkflowInstanceRecord> {
    private static readonly pb::MessageParser<WorkflowInstanceRecord> _parser = new pb::MessageParser<WorkflowInstanceRecord>(() => new WorkflowInstanceRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkflowInstanceRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ExporterProtocol.SchemaReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkflowInstanceRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkflowInstanceRecord(WorkflowInstanceRecord other) : this() {
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      bpmnProcessId_ = other.bpmnProcessId_;
      version_ = other.version_;
      workflowKey_ = other.workflowKey_;
      workflowInstanceKey_ = other.workflowInstanceKey_;
      elementId_ = other.elementId_;
      scopeInstanceKey_ = other.scopeInstanceKey_;
      payload_ = other.payload_ != null ? other.payload_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkflowInstanceRecord Clone() {
      return new WorkflowInstanceRecord(this);
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private global::ExporterProtocol.RecordMetadata metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ExporterProtocol.RecordMetadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "bpmnProcessId" field.</summary>
    public const int BpmnProcessIdFieldNumber = 2;
    private string bpmnProcessId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BpmnProcessId {
      get { return bpmnProcessId_; }
      set {
        bpmnProcessId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "workflowKey" field.</summary>
    public const int WorkflowKeyFieldNumber = 4;
    private long workflowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WorkflowKey {
      get { return workflowKey_; }
      set {
        workflowKey_ = value;
      }
    }

    /// <summary>Field number for the "workflowInstanceKey" field.</summary>
    public const int WorkflowInstanceKeyFieldNumber = 5;
    private long workflowInstanceKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WorkflowInstanceKey {
      get { return workflowInstanceKey_; }
      set {
        workflowInstanceKey_ = value;
      }
    }

    /// <summary>Field number for the "elementId" field.</summary>
    public const int ElementIdFieldNumber = 6;
    private string elementId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ElementId {
      get { return elementId_; }
      set {
        elementId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scopeInstanceKey" field.</summary>
    public const int ScopeInstanceKeyFieldNumber = 7;
    private long scopeInstanceKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ScopeInstanceKey {
      get { return scopeInstanceKey_; }
      set {
        scopeInstanceKey_ = value;
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Struct payload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Payload {
      get { return payload_; }
      set {
        payload_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkflowInstanceRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkflowInstanceRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (BpmnProcessId != other.BpmnProcessId) return false;
      if (Version != other.Version) return false;
      if (WorkflowKey != other.WorkflowKey) return false;
      if (WorkflowInstanceKey != other.WorkflowInstanceKey) return false;
      if (ElementId != other.ElementId) return false;
      if (ScopeInstanceKey != other.ScopeInstanceKey) return false;
      if (!object.Equals(Payload, other.Payload)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (BpmnProcessId.Length != 0) hash ^= BpmnProcessId.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (WorkflowKey != 0L) hash ^= WorkflowKey.GetHashCode();
      if (WorkflowInstanceKey != 0L) hash ^= WorkflowInstanceKey.GetHashCode();
      if (ElementId.Length != 0) hash ^= ElementId.GetHashCode();
      if (ScopeInstanceKey != 0L) hash ^= ScopeInstanceKey.GetHashCode();
      if (payload_ != null) hash ^= Payload.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      if (BpmnProcessId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BpmnProcessId);
      }
      if (Version != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Version);
      }
      if (WorkflowKey != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(WorkflowKey);
      }
      if (WorkflowInstanceKey != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(WorkflowInstanceKey);
      }
      if (ElementId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ElementId);
      }
      if (ScopeInstanceKey != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(ScopeInstanceKey);
      }
      if (payload_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Payload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (BpmnProcessId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BpmnProcessId);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (WorkflowKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WorkflowKey);
      }
      if (WorkflowInstanceKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WorkflowInstanceKey);
      }
      if (ElementId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ElementId);
      }
      if (ScopeInstanceKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ScopeInstanceKey);
      }
      if (payload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkflowInstanceRecord other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          metadata_ = new global::ExporterProtocol.RecordMetadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.BpmnProcessId.Length != 0) {
        BpmnProcessId = other.BpmnProcessId;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.WorkflowKey != 0L) {
        WorkflowKey = other.WorkflowKey;
      }
      if (other.WorkflowInstanceKey != 0L) {
        WorkflowInstanceKey = other.WorkflowInstanceKey;
      }
      if (other.ElementId.Length != 0) {
        ElementId = other.ElementId;
      }
      if (other.ScopeInstanceKey != 0L) {
        ScopeInstanceKey = other.ScopeInstanceKey;
      }
      if (other.payload_ != null) {
        if (payload_ == null) {
          payload_ = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Payload.MergeFrom(other.Payload);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metadata_ == null) {
              metadata_ = new global::ExporterProtocol.RecordMetadata();
            }
            input.ReadMessage(metadata_);
            break;
          }
          case 18: {
            BpmnProcessId = input.ReadString();
            break;
          }
          case 24: {
            Version = input.ReadInt32();
            break;
          }
          case 32: {
            WorkflowKey = input.ReadInt64();
            break;
          }
          case 40: {
            WorkflowInstanceKey = input.ReadInt64();
            break;
          }
          case 50: {
            ElementId = input.ReadString();
            break;
          }
          case 56: {
            ScopeInstanceKey = input.ReadInt64();
            break;
          }
          case 66: {
            if (payload_ == null) {
              payload_ = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(payload_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WorkflowInstanceSubscriptionRecord : pb::IMessage<WorkflowInstanceSubscriptionRecord> {
    private static readonly pb::MessageParser<WorkflowInstanceSubscriptionRecord> _parser = new pb::MessageParser<WorkflowInstanceSubscriptionRecord>(() => new WorkflowInstanceSubscriptionRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkflowInstanceSubscriptionRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ExporterProtocol.SchemaReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkflowInstanceSubscriptionRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkflowInstanceSubscriptionRecord(WorkflowInstanceSubscriptionRecord other) : this() {
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      workflowInstanceKey_ = other.workflowInstanceKey_;
      elementInstanceKey_ = other.elementInstanceKey_;
      messageName_ = other.messageName_;
      payload_ = other.payload_ != null ? other.payload_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkflowInstanceSubscriptionRecord Clone() {
      return new WorkflowInstanceSubscriptionRecord(this);
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private global::ExporterProtocol.RecordMetadata metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ExporterProtocol.RecordMetadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "workflowInstanceKey" field.</summary>
    public const int WorkflowInstanceKeyFieldNumber = 2;
    private long workflowInstanceKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WorkflowInstanceKey {
      get { return workflowInstanceKey_; }
      set {
        workflowInstanceKey_ = value;
      }
    }

    /// <summary>Field number for the "elementInstanceKey" field.</summary>
    public const int ElementInstanceKeyFieldNumber = 3;
    private long elementInstanceKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ElementInstanceKey {
      get { return elementInstanceKey_; }
      set {
        elementInstanceKey_ = value;
      }
    }

    /// <summary>Field number for the "messageName" field.</summary>
    public const int MessageNameFieldNumber = 4;
    private string messageName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageName {
      get { return messageName_; }
      set {
        messageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Struct payload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Payload {
      get { return payload_; }
      set {
        payload_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkflowInstanceSubscriptionRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkflowInstanceSubscriptionRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (WorkflowInstanceKey != other.WorkflowInstanceKey) return false;
      if (ElementInstanceKey != other.ElementInstanceKey) return false;
      if (MessageName != other.MessageName) return false;
      if (!object.Equals(Payload, other.Payload)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (WorkflowInstanceKey != 0L) hash ^= WorkflowInstanceKey.GetHashCode();
      if (ElementInstanceKey != 0L) hash ^= ElementInstanceKey.GetHashCode();
      if (MessageName.Length != 0) hash ^= MessageName.GetHashCode();
      if (payload_ != null) hash ^= Payload.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      if (WorkflowInstanceKey != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(WorkflowInstanceKey);
      }
      if (ElementInstanceKey != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ElementInstanceKey);
      }
      if (MessageName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MessageName);
      }
      if (payload_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Payload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (WorkflowInstanceKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WorkflowInstanceKey);
      }
      if (ElementInstanceKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ElementInstanceKey);
      }
      if (MessageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageName);
      }
      if (payload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkflowInstanceSubscriptionRecord other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          metadata_ = new global::ExporterProtocol.RecordMetadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.WorkflowInstanceKey != 0L) {
        WorkflowInstanceKey = other.WorkflowInstanceKey;
      }
      if (other.ElementInstanceKey != 0L) {
        ElementInstanceKey = other.ElementInstanceKey;
      }
      if (other.MessageName.Length != 0) {
        MessageName = other.MessageName;
      }
      if (other.payload_ != null) {
        if (payload_ == null) {
          payload_ = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Payload.MergeFrom(other.Payload);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metadata_ == null) {
              metadata_ = new global::ExporterProtocol.RecordMetadata();
            }
            input.ReadMessage(metadata_);
            break;
          }
          case 16: {
            WorkflowInstanceKey = input.ReadInt64();
            break;
          }
          case 24: {
            ElementInstanceKey = input.ReadInt64();
            break;
          }
          case 34: {
            MessageName = input.ReadString();
            break;
          }
          case 42: {
            if (payload_ == null) {
              payload_ = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(payload_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
